##################################################################################################
#                                                                                                #
#   AUTHOR: Marc Serramia                                                                        #
#                                                                                                #
#   versio +1: Eugeni Blas - [Integrated Model: Inclusion of Value alignement]                   #
#                                                                                                #
##################################################################################################

from DecidimProblemBuilder import DecidimProblemBuilder
from DecidimOptim import DecidimOptim
import os

class DecidimPlot:
    #This class generates the LPs for the proposal selection environment that the user has specified, and then solves
    #them with both methods and compares them by providing plots

    def __init__(self):
        self.original = None #Original problem LP
        #self.minb = None #Minimum budget to consider
        #self.maxb = None #Maximum budget to consider
        #self.increment = None #Increments of budget between LPs
        self.inputnames = None #Filenames of the generated LP files
        #self.outputSupAct = None #Output file of support data for the "rank and select" method
        #self.outputCostAct = None #Output file of cost data for the "rank and select" method
        #self.outputNumAct = None #Output file of num. proposals data for the "rank and select" method
        #self.outputValAct = None #Output file of value proposals data for the "rank and select" method
        #self.outputSupOpt = None #Output file of support data for the optimisation method
        #self.outputCostOpt = None #Output file of cost data for the optimisation method
        #self.outputNumOpt = None #Output file of num. proposals data for the optimisation method
        #self.outputValOpt = None #Output file of value proposals data for the optimisation method
        self.outputOmega = None #Output file for variations of omega parameter with optimisation method
        #self.origbud = None #Budget of the original problem
        self.weights = [] # Weights considered in the problem
        self.folder = "" #Directory of the slelected dataset (Eixample/Gracia)
        self.plotsfolder ="" #Directory to save the plots
        self.buildpath = None #Directory to save the generated LP problems
  
   
    def build(self):
        #The method asks the user which the variables of the environment (dataset, budget range, incremet and weights)
        #and then builds the necessary LP files
        wd = os.getcwd()
        self.folder = wd +"/ExperimentData/"+input("District Name:\n")+"/"
        self.plotsfolder = self.folder+"Plots/"
        self.original = self.folder + self.folder.split("/")[-2] + ".txt"
        #self.minb = int(input("Minimum budget to check:\n"))
        #self.maxb = int(input("Maximum budget to check:\n"))
        #self.origbud = int(input("Original budget:\n"))
        #self.increment = int(input("Increments to make:\n"))
        self.minb=0
        self.maxb=0
        self.origbud=0
        self.increment=0
        self.buildpath = self.folder+"Data/"

        self.weights = [0.5, 0, 0.5] #Weights: citizen-satisfaction, spent-budget, value-alignement, but only use first parameter (citizen-satisfaction)
        self.outputOmega = self.folder + "Omega/DATA_OMEGA.txt"
       
        dpb = DecidimProblemBuilder(self.original, self.weights, self.buildpath)
        dpb.build()
        self.inputnames = dpb.getFileNames()
        return dpb.getFileNames()
    

    def solve(self, filename, outputs = None, firstTime = None):
        #Solves the LP files generated by the build method
        problem = DecidimOptim()
        problem.readData(filename)
        problem.writeLP()
        if firstTime == 1:
            problem.solveNoOptimisation(outputOmega=outputs[0],show=True)
            problem.solveNoOptimisationValue(outputOmega=outputs[0],show=True)
        problem.solve(outputOmega=outputs[0],show=True) #TEST
       
        problem.show_info()


    def getOutputs(self):
        print(str(self.outputOmega))
        return (self.outputOmega)


def main():
    dp = DecidimPlot()
    inputnames = dp.build()
    outputnames = [dp.getOutputs()]
    print(str(outputnames))
    outputs = [open(outputnames[0], "w")]
    firstTime = 1
    for filename in inputnames:
        dp.solve(filename, outputs, firstTime)
        firstTime = 0
    for f in outputs:
        f.close()


if __name__ == "__main__":
        main()